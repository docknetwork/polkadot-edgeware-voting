{"version":3,"file":"static/webpack/static/development/pages/proposal/[id].js.194bd3cb6ef845e15d86.hot-update.js","sources":["webpack:///./pages/proposal/.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useRouter } from 'next/router';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport substrateService from '../../services/substrate';\n\nconst Proposal = () => {\n  const router = useRouter();\n  const hash = router.query.id;\n  const [proposal, setProposal] = useState();\n  const [voteRecords, setVoteRecords] = useState();\n  const [results, setResults] = useState();\n  const [vote, setVote] = useState('');\n\n  async function loadProposal() {\n    const data = await substrateService.getProposal(hash);\n    setProposal(data.toJSON());\n    const voteRecords = await substrateService.getVoteRecords(data.toJSON().vote_id);\n    const voteData = voteRecords.toJSON();\n    setVoteRecords(voteData);\n    console.log('voteData', voteData)\n\n    if (voteData) {\n      const voteResults = {};\n      const revealsCount = voteData.reveals.length;\n      for (let i = 0; i < revealsCount; i++) {\n        const reveal = voteData.reveals[i];\n        // const voterAddress = reveal[0];\n        const votedOptions = reveal[1];\n\n        for (let c = 0; c < votedOptions.length; c++) {\n          const option = votedOptions[c];\n          if (voteResults[option]) {\n            voteResults[option]++;\n          } else {\n            voteResults[option] = 1;\n          }\n        }\n      }\n\n      setResults(voteResults);\n    }\n  }\n\n  const handleVoteChange = event => {\n    setVote(event.target.value);\n  };\n\n  function hexToAscii(str) {\n  \tconst hex = str.toString().substr(2, str.length);\n  \tlet result = '';\n  \tfor (var n = 0; n < hex.length; n += 2) {\n      const intInput = parseInt(hex.substr(n, 2), 16);\n      if (intInput !== 0) {\n    \t\tresult += String.fromCharCode(intInput);\n      }\n  \t}\n  \treturn result;\n  }\n\n  function handleVote() {\n    substrateService.vote(voteRecords.id, vote);\n  }\n\n  useEffect(() => {\n    if (!proposal && hash) {\n      loadProposal();\n    }\n  }, [proposal]);\n\n  if (proposal) {\n    return (\n      <>\n        <Typography variant=\"h4\">\n          {proposal.title}\n        </Typography>\n        <br />\n        <Card>\n          <CardContent>\n            <Typography variant=\"h5\">\n              {proposal.contents}\n            </Typography>\n            <br />\n            <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n              Hash: {hash}\n            </Typography>\n\n            {voteRecords && (\n              <>\n                <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                  Author: {proposal.author}\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                  Commitments: {voteRecords ? voteRecords.commitments.length : 0}\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                  Reveals: {voteRecords ? voteRecords.reveals.length : 0}\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                  Stage: {Object.keys(voteRecords.data.stage)[0]}\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                  Vote Type: {voteRecords.data.vote_type.binary === null ? 'Binary' : 'MultiOption'}\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                  Tally Type: {voteRecords.data.tally_type.oneperson === null ? 'OnePerson' : 'OneCoin'}\n                </Typography>\n                <Typography variant=\"h6\" color=\"textSecondary\">\n                  Is Commit/Reveal: {voteRecords.data.is_commit_reveal ? 'true' : 'false'}\n                </Typography>\n\n                <br />\n\n                <FormControl component=\"fieldset\">\n                  <FormLabel component=\"legend\">Votes</FormLabel>\n                  <RadioGroup aria-label=\"vote\" name=\"vote\" value={vote} onChange={handleVoteChange}>\n                    {voteRecords.outcomes.map((outcome, index) => (\n                      <FormControlLabel key={index} value={outcome} control={<Radio />} label={`${hexToAscii(outcome)} - ${results ? (results[outcome] || 0) : 0}/${voteRecords ? voteRecords.reveals.length : 0} votes`} />\n                    ))}\n                  </RadioGroup>\n                </FormControl>\n\n                {Object.keys(voteRecords.data.stage)[0] === 'voting' && (\n                  <>\n                    <br /><br />\n                    <Button\n                      variant=\"contained\"\n                      type=\"button\"\n                      onClick={handleVote}\n                      >\n                      Submit Vote\n                    </Button>\n                  </>\n                )}\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <br />\n\n        {voteRecords && (\n          <Card>\n            <TableContainer component={CardContent}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Dessert (100g serving)</TableCell>\n                    <TableCell align=\"right\">Voted For</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {voteRecords.reveals.map((row, index) => (\n                    <TableRow key={index}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row[0]}\n                      </TableCell>\n                      <TableCell align=\"right\">.calories}</TableCell>\n                      <TableCell align=\"right\">.fat}</TableCell>\n                      <TableCell align=\"right\">.carbs}</TableCell>\n                      <TableCell align=\"right\">.protein}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Card>\n        )}\n      </>\n    );\n  } else {\n    return (\n      <Typography variant=\"h4\">\n        Loading...\n      </Typography>\n    );\n  }\n};\n\nexport default Proposal;\n"],"mappings":"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","sourceRoot":""}